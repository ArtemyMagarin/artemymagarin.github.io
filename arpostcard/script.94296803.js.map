{"version":3,"sources":["node_modules/audio-recorder-polyfill/wave-encoder/index.js","node_modules/audio-recorder-polyfill/index.js","paginator.js","script.js"],"names":["BYTES_PER_SAMPLE","recorded","onmessage","e","data","encode","buffer","length","Uint8Array","i","index","sample","push","dump","sampleRate","bufferLength","wav","view","DataView","setUint32","setUint16","set","postMessage","MediaRecorder","context","AudioContext","window","webkitAudioContext","createWorker","fn","js","toString","replace","blob","Blob","Worker","URL","createObjectURL","error","method","event","Event","Error","constructor","stream","config","state","em","document","createDocumentFragment","encoder","recorder","addEventListener","type","mimeType","dispatchEvent","start","timeslice","clone","input","createMediaStreamSource","processor","createScriptProcessor","onaudioprocess","inputBuffer","getChannelData","connect","destination","slicing","setInterval","requestData","stop","getTracks","forEach","track","disconnect","clearInterval","pause","resume","args","removeEventListener","prototype","isTypeSupported","notSupported","navigator","mediaDevices","waveEncoder","currentPage","_getPageElement","pageNumber","querySelector","_hidePage","hidden","_openNext","nextPage","current","next","classList","add","remove","setTimeout","bind","_openPrev","openPage","AudioRecorder","recordButton","getElementById","stopButton","audio","style","display","getUserMedia","then","src","controls","play","console","log"],"mappings":"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","file":"script.94296803.js","sourceRoot":"..","sourcesContent":["// Copied from https://github.com/chris-rudmin/Recorderjs\n\nexport default () => {\n  let BYTES_PER_SAMPLE = 2\n\n  let recorded = []\n\n  function encode (buffer) {\n    let length = buffer.length\n    let data = new Uint8Array(length * BYTES_PER_SAMPLE)\n    for (let i = 0; i < length; i++) {\n      let index = i * BYTES_PER_SAMPLE\n      let sample = buffer[i]\n      if (sample > 1) {\n        sample = 1\n      } else if (sample < -1) {\n        sample = -1\n      }\n      sample = sample * 32768\n      data[index] = sample\n      data[index + 1] = sample >> 8\n    }\n    recorded.push(data)\n  }\n\n  function dump (sampleRate) {\n    let bufferLength = recorded.length ? recorded[0].length : 0\n    let length = recorded.length * bufferLength\n    let wav = new Uint8Array(44 + length)\n    let view = new DataView(wav.buffer)\n\n    // RIFF identifier 'RIFF'\n    view.setUint32(0, 1380533830, false)\n    // file length minus RIFF identifier length and file description length\n    view.setUint32(4, 36 + length, true)\n    // RIFF type 'WAVE'\n    view.setUint32(8, 1463899717, false)\n    // format chunk identifier 'fmt '\n    view.setUint32(12, 1718449184, false)\n    // format chunk length\n    view.setUint32(16, 16, true)\n    // sample format (raw)\n    view.setUint16(20, 1, true)\n    // channel count\n    view.setUint16(22, 1, true)\n    // sample rate\n    view.setUint32(24, sampleRate, true)\n    // byte rate (sample rate * block align)\n    view.setUint32(28, sampleRate * BYTES_PER_SAMPLE, true)\n    // block align (channel count * bytes per sample)\n    view.setUint16(32, BYTES_PER_SAMPLE, true)\n    // bits per sample\n    view.setUint16(34, 8 * BYTES_PER_SAMPLE, true)\n    // data chunk identifier 'data'\n    view.setUint32(36, 1684108385, false)\n    // data chunk length\n    view.setUint32(40, length, true)\n\n    // eslint-disable-next-line unicorn/no-for-loop\n    for (let i = 0; i < recorded.length; i++) {\n      wav.set(recorded[i], i * bufferLength + 44)\n    }\n\n    recorded = []\n    postMessage(wav.buffer, [wav.buffer])\n  }\n\n  onmessage = e => {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1])\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1])\n    }\n  }\n}\n","import waveEncoder from './wave-encoder/index.js'\n\nlet AudioContext = window.AudioContext || window.webkitAudioContext\n\nlet createWorker = fn => {\n  let js = fn\n    .toString()\n    .replace(/^(\\(\\)\\s*=>|function\\s*\\(\\))\\s*{/, '')\n    .replace(/}$/, '')\n  let blob = new Blob([js])\n  return new Worker(URL.createObjectURL(blob))\n}\n\nlet error = method => {\n  let event = new Event('error')\n  event.data = new Error('Wrong state for ' + method)\n  return event\n}\n\nlet context\n\n/**\n * Audio Recorder with MediaRecorder API.\n *\n * @example\n * navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n *   let recorder = new MediaRecorder(stream)\n * })\n */\nclass MediaRecorder {\n  /**\n   * @param {MediaStream} stream The audio stream to record.\n   */\n  constructor (stream, config = null) {\n    /**\n     * The `MediaStream` passed into the constructor.\n     * @type {MediaStream}\n     */\n    this.stream = stream\n    this.config = config\n    /**\n     * The current state of recording process.\n     * @type {\"inactive\"|\"recording\"|\"paused\"}\n     */\n    this.state = 'inactive'\n\n    this.em = document.createDocumentFragment()\n    this.encoder = createWorker(MediaRecorder.encoder)\n\n    let recorder = this\n    this.encoder.addEventListener('message', e => {\n      let event = new Event('dataavailable')\n      event.data = new Blob([e.data], { type: recorder.mimeType })\n      recorder.em.dispatchEvent(event)\n      if (recorder.state === 'inactive') {\n        recorder.em.dispatchEvent(new Event('stop'))\n      }\n    })\n  }\n\n  /**\n   * Begins recording media.\n   *\n   * @param {number} [timeslice] The milliseconds to record into each `Blob`.\n   *                             If this parameter isn’t included, single `Blob`\n   *                             will be recorded.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * recordButton.addEventListener('click', () => {\n   *   recorder.start()\n   * })\n   */\n  start (timeslice) {\n    if (this.state !== 'inactive') {\n      return this.em.dispatchEvent(error('start'))\n    }\n\n    this.state = 'recording'\n\n    if (!context) {\n      context = new AudioContext(this.config)\n    }\n    this.clone = this.stream.clone()\n    this.input = context.createMediaStreamSource(this.clone)\n    this.processor = context.createScriptProcessor(2048, 1, 1)\n\n    this.encoder.postMessage(['init', context.sampleRate])\n\n    this.processor.onaudioprocess = e => {\n      if (this.state === 'recording') {\n        this.encoder.postMessage(['encode', e.inputBuffer.getChannelData(0)])\n      }\n    }\n\n    this.input.connect(this.processor)\n    this.processor.connect(context.destination)\n\n    this.em.dispatchEvent(new Event('start'))\n\n    if (timeslice) {\n      this.slicing = setInterval(() => {\n        if (this.state === 'recording') this.requestData()\n      }, timeslice)\n    }\n\n    return undefined\n  }\n\n  /**\n   * Stop media capture and raise `dataavailable` event with recorded data.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * finishButton.addEventListener('click', () => {\n   *   recorder.stop()\n   * })\n   */\n  stop () {\n    if (this.state === 'inactive') {\n      return this.em.dispatchEvent(error('stop'))\n    }\n\n    this.requestData()\n    this.state = 'inactive'\n    this.clone.getTracks().forEach(track => {\n      track.stop()\n    })\n    this.processor.disconnect()\n    this.input.disconnect()\n    return clearInterval(this.slicing)\n  }\n\n  /**\n   * Pauses recording of media streams.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * pauseButton.addEventListener('click', () => {\n   *   recorder.pause()\n   * })\n   */\n  pause () {\n    if (this.state !== 'recording') {\n      return this.em.dispatchEvent(error('pause'))\n    }\n\n    this.state = 'paused'\n    return this.em.dispatchEvent(new Event('pause'))\n  }\n\n  /**\n   * Resumes media recording when it has been previously paused.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * resumeButton.addEventListener('click', () => {\n   *   recorder.resume()\n   * })\n   */\n  resume () {\n    if (this.state !== 'paused') {\n      return this.em.dispatchEvent(error('resume'))\n    }\n\n    this.state = 'recording'\n    return this.em.dispatchEvent(new Event('resume'))\n  }\n\n  /**\n   * Raise a `dataavailable` event containing the captured media.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * this.on('nextData', () => {\n   *   recorder.requestData()\n   * })\n   */\n  requestData () {\n    if (this.state === 'inactive') {\n      return this.em.dispatchEvent(error('requestData'))\n    }\n\n    return this.encoder.postMessage(['dump', context.sampleRate])\n  }\n\n  /**\n   * Add listener for specified event type.\n   *\n   * @param {\"start\"|\"stop\"|\"pause\"|\"resume\"|\"dataavailable\"|\"error\"}\n   * type Event type.\n   * @param {function} listener The listener function.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * recorder.addEventListener('dataavailable', e => {\n   *   audio.src = URL.createObjectURL(e.data)\n   * })\n   */\n  addEventListener (...args) {\n    this.em.addEventListener(...args)\n  }\n\n  /**\n   * Remove event listener.\n   *\n   * @param {\"start\"|\"stop\"|\"pause\"|\"resume\"|\"dataavailable\"|\"error\"}\n   * type Event type.\n   * @param {function} listener The same function used in `addEventListener`.\n   *\n   * @return {undefined}\n   */\n  removeEventListener (...args) {\n    this.em.removeEventListener(...args)\n  }\n\n  /**\n   * Calls each of the listeners registered for a given event.\n   *\n   * @param {Event} event The event object.\n   *\n   * @return {boolean} Is event was no canceled by any listener.\n   */\n  dispatchEvent (...args) {\n    this.em.dispatchEvent(...args)\n  }\n}\n\n/**\n * The MIME type that is being used for recording.\n * @type {string}\n */\nMediaRecorder.prototype.mimeType = 'audio/wav'\n\n/**\n * Returns `true` if the MIME type specified is one the polyfill can record.\n *\n * This polyfill supports `audio/wav` and `audio/mpeg`.\n *\n * @param {string} mimeType The mimeType to check.\n *\n * @return {boolean} `true` on `audio/wav` and `audio/mpeg` MIME type.\n */\nMediaRecorder.isTypeSupported = mimeType => {\n  return MediaRecorder.prototype.mimeType === mimeType\n}\n\n/**\n * `true` if MediaRecorder can not be polyfilled in the current browser.\n * @type {boolean}\n *\n * @example\n * if (MediaRecorder.notSupported) {\n *   showWarning('Audio recording is not supported in this browser')\n * }\n */\nMediaRecorder.notSupported = !navigator.mediaDevices || !AudioContext\n\n/**\n * Converts RAW audio buffer to compressed audio files.\n * It will be loaded to Web Worker.\n * By default, WAVE encoder will be used.\n * @type {function}\n *\n * @example\n * MediaRecorder.prototype.mimeType = 'audio/ogg'\n * MediaRecorder.encoder = oggEncoder\n */\nMediaRecorder.encoder = waveEncoder\n\nexport default MediaRecorder\n","let currentPage = 1;\n\nfunction _getPageElement(pageNumber) {\n\treturn document.querySelector(`[data-page=\"${pageNumber}\"]`);\n}\n\nfunction _hidePage(pageNumber) {\n\t_getPageElement(pageNumber).hidden = true\n}\n\nfunction _openNext(nextPage) {\n\tconst current = _getPageElement(currentPage);\n\tconst next = _getPageElement(nextPage);\n\tnext.classList.add('top', 'animate_rtl');\n\tcurrent.classList.remove('top', 'animate_ltr', 'animate_ltre_rtl');\n\tsetTimeout(_hidePage.bind(null, currentPage), 300);\n\tnext.hidden = false;\n\tcurrentPage = nextPage;\n}\n\nfunction _openPrev(nextPage) {\n\tconst current = _getPageElement(currentPage);\n\tconst next = _getPageElement(nextPage);\n\tnext.classList.add('top', 'animate_ltr');\n\tcurrent.classList.remove('top', 'animate_ltr', 'animate_rtl');\n\tsetTimeout(_hidePage.bind(null, currentPage), 300);\n\tnext.hidden = false;\n\tcurrentPage = nextPage;\n}\n\nexport function openPage(nextPage) {\n\tif (nextPage > currentPage) {\n\t\t_openNext(nextPage);\n\t} else if (nextPage < currentPage) {\n\t\t_openPrev(nextPage);\n\t}\n}\n\n","import AudioRecorder from \"audio-recorder-polyfill\";\nimport { openPage } from \"./paginator\";\n\nwindow.MediaRecorder = window.MediaRecorder || AudioRecorder;\n\nlet recorder;\n\nconst recordButton = document.getElementById(\"start-record\");\nconst stopButton = document.getElementById(\"stop-record\");\nconst audio = document.getElementById(\"audio\");\n\nrecordButton.addEventListener(\"click\", () => {\n  stopButton.style.display = \"block\";\n  recordButton.style.display = \"none\";\n\n  // Request permissions to record audio\n  navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n    recorder = new MediaRecorder(stream);\n\n    // Set record to <audio> when recording will be finished\n    recorder.addEventListener(\"dataavailable\", (e) => {\n      audio.src = URL.createObjectURL(e.data);\n    });\n\n    // Start recording\n    recorder.start();\n    document.getElementById(\"save-button\").classList.add(\"hidden\");\n  });\n});\n\nstopButton.addEventListener(\"click\", () => {\n  // Stop recording\n  recorder.stop();\n  // Remove “recording” icon from browser tab\n  recorder.stream.getTracks().forEach((i) => i.stop());\n\n  document.getElementById(\"save-button\").classList.remove(\"hidden\");\n  audio.controls = true;\n  stopButton.style.display = \"none\";\n  recordButton.style.display = \"block\";\n});\n\ndocument.querySelector(\"#select-button\").addEventListener(\"click\", () => {\n  openPage(2);\n});\n\ndocument\n    .querySelector(\"#go-back-to-1\")\n    .addEventListener(\"click\", () => openPage(1));\n\ndocument\n    .querySelector(\"#go-back-to-2\")\n    .addEventListener(\"click\", () => openPage(2));\n\ndocument\n    .getElementById(\"save-button\")\n    .addEventListener(\"click\", () => openPage(3));\n\n\ndocument.querySelector('[data-resultLink]').addEventListener('click', () => {\n  document.getElementById(\"audio\").play();\n})\n\ndocument.querySelector('[data-resultLink]').addEventListener(\"message\", function (event) {\n  if (event.data === \"_apple_ar_quicklook_button_tapped\") {\n    console.log('lol');\n  }\n}, false);\n"]}