{"version":3,"sources":["components/Header.js","components/Card.js","components/Main.js","components/List.js","serviceWorker.js","index.js","components/App.js"],"names":["Header","react_default","a","createElement","className","Card","props","cardRef","useRef","_useState","useState","_useState2","Object","slicedToArray","style","setStyle","_useState3","_useState4","solutionClass","setSolutionClass","winWidth","window","outerWidth","useEffect","el","current","addEventListener","mouseDown","removeEventListener","e","startPosX","pageX","changedTouches","clientX","delta","mouseMove","undefined","Math","abs","transform","concat","opacity","max","mouseUp","parentNode","removeChild","incCount","goRight","goLeft","ref","data-left","left","data-right","right","children","Main","cardList","setCardList","questionsCount","setQuestionsCount","_useState5","_useState6","currQuestionsCount","setCurrQuestionsCount","fetch","then","data","json","length","Fragment","Card_Card","map","item","index","key","text","uppendTestData","area","onClick","onEnd","List","location","Boolean","hostname","match","ReactDOM","render","testEnd","setTestEnd","testData","Header_Header","Main_Main","objectSpread","defineProperty","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96b09d58.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Header = () => {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <h1 className=\"navbar-brand mx-auto my-2\">ProWay</h1>\n        </nav>\n    )\n}\n","import React, { useState, useEffect, useRef } from 'react';\n\nexport const Card = (props) => {\n    const cardRef = useRef(null)\n    const [style, setStyle] = useState(null)\n    const [solutionClass, setSolutionClass] = useState('')\n    const winWidth = window.outerWidth\n\n    useEffect(() => {\n        const el = cardRef.current\n        el.addEventListener('mousedown', mouseDown, true);\n        el.addEventListener('touchstart', mouseDown, true);\n        return () => {\n            el.removeEventListener('mousedown', mouseDown, true);\n            el.removeEventListener('touchstart', mouseDown, true);\n        }\n    }, [])\n\n    const mouseDown = (e) => {\n        const startPosX = e.pageX || e.changedTouches[0].clientX\n        let delta = 0\n        const el = cardRef.current\n\n        const mouseMove = e => {\n            delta = (e.pageX !== undefined ?  e.pageX : e.changedTouches[0].clientX) - startPosX\n            if (Math.abs(delta)/winWidth > 0.3) {\n                setStyle({\n                    transform: `translateX(${delta}px) rotate(${delta > 0 ? 1 : -1}deg)`,\n                    opacity: Math.max(0, 1-(Math.abs(delta)/winWidth)),  \n                })\n                setSolutionClass(`overlayed ${delta > 0?'yes':'no'}`)\n            } else {\n                setStyle({transform: `translateX(${delta}px) rotate(${delta > 0?1:-1}deg)`})\n                setSolutionClass('');\n            }\n        }\n\n        const mouseUp = e => {\n            window.removeEventListener('mousemove', mouseMove, true);\n            window.removeEventListener('touchmove', mouseMove, true);\n\n            if (Math.abs(delta) / winWidth > 0.3) {\n                el.parentNode && el.parentNode.removeChild(el)\n                props.incCount && props.incCount()\n                if (delta > 0) {\n                    props.goRight && props.goRight()\n                } else {\n                   props.goLeft && props.goLeft()\n                }\n            } else {\n                setStyle(null)\n            }\n        }\n\n        window.addEventListener('mousemove', mouseMove, true);\n        window.addEventListener('touchmove', mouseMove, true);\n        window.addEventListener('mouseup', mouseUp, true)\n        window.addEventListener('touchend', mouseUp, true)\n    }\n\n    return (\n        <div className={`card ${solutionClass}`} ref={cardRef} style={style} data-left={props.left} data-right={props.right}>\n            <div className=\"card-body\">\n                {props.children}\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { Card } from './Card';\nimport '../styles/cardstock.css';\nimport '../styles/buttonsrow.css';\n\nexport const Main = (props) => {\n\n    const [cardList, setCardList] = useState([])\n    const [questionsCount, setQuestionsCount] = useState(30)\n    const [currQuestionsCount, setCurrQuestionsCount] = useState(0)\n   \n    useEffect(()=>{\n        fetch('/questions.json').then(data => data.json()).then(setCardList)\n        setQuestionsCount(cardList.length)\n    }, [cardList.length])\n\n    const incCount = () => {\n        setCurrQuestionsCount(currQuestionsCount+1)\n    }\n\n    const swipe = (dir) => {\n        const winWidth = window.outerWidth\n        const el = document.querySelector('.card-stock .card:first-child')\n        el.style.transform = `translateX(${dir === 'r' ? '' : '-'}${winWidth/2}px) rotate(${dir === 'r' ? 1 : -1}deg)`\n        setTimeout(() => {\n            el.parentNode && el.parentNode.removeChild(el)\n        }, 300)\n    }\n\n    return (\n        <>\n            <p className=\"my-2 text-right\">{questionsCount && `Пройдено ${currQuestionsCount}/${questionsCount}`}</p>\n            <div className=\"card-stock\">\n                <Card> \n                    <>\n                        <h5 className=\"card-title\">Привет!</h5>\n                        <p className=\"card-text\">\n                            Здесь ты можешь пройти тест на профориентацию. \n                            Он состоит из 30 вопросов, \n                            которые помогут подобрать тебе профессию,\n                            и укажет, где тебя ей научат.\n                        </p>\n                        <p className=\"card-text\">\n                            Свайпай карточки влево или вправо, \n                            в зависимости от того, какой ответ\n                            хочешь выбрать\n                        </p>\n                    </>\n                </Card> \n\n                {cardList.map((item, index) => (\n                    <Card \n                        key={index}\n                        left={item[0].text} \n                        right={item[1].text}\n                        incCount={() => {setCurrQuestionsCount(index+1)}}\n                        goLeft={() => {props.uppendTestData(item[0].area)}}\n                        goRight={() => {props.uppendTestData(item[1].area)}}\n                        >\n                        <>\n                            <h5 className=\"card-title\">Что выберешь?</h5>\n                            <div className=\"card-body row\">\n                                <p className=\"card-text col-md-6 col-sm-6 col-6 col-lg-6\">{item[0].text}</p>\n                                <p className=\"card-text col-md-6 col-sm-6 col-6 col-lg-6\">{item[1].text}</p>\n                            </div>\n                        </>\n                    </Card>   \n                ))} \n\n                <div className=\"btn-wr w-100\">\n                    <button className={'d-block btn btn-lg btn-primary mx-auto my-5'} onClick={() => {props.onEnd()}}>Посмотреть результат</button>\n                </div>\n            </div>\n        </>       \n    )\n}\n\n","import React, { Component } from 'react';\n\nexport const List = () => {\n    window.location = '/results.html'\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React, { useState } from 'react';\nimport { Header } from './Header';\nimport { Main } from './Main';\nimport { List } from './List';\n\nimport '../styles/common.css';\n\nexport const App = () => {\n    let [testEnd, setTestEnd] = useState(false);\n    let testData = {}\n\n    const onEnd = () => {\n        setTestEnd(true)\n    }\n\n    const uppendTestData = (key) => {\n        testData = {...testData, [key]: (testData[key]+1 || 1) }\n    }\n\n    return (\n        <>\n            <Header />\n            <div className=\"container\">\n                {!testEnd ? <Main onEnd={()=>{onEnd()}} uppendTestData={(key) => {uppendTestData(key)}}/> : <List testData={testData}/>}\n            </div>\n        </>\n    )\n}"],"sourceRoot":""}